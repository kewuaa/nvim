[+]
exe_suffix=.exe
os_bits=64
target_triple=x86_64-windows-gnu
c_flags=
cx_flags=
cxx_flags=
fpc_target_cpu=x86_64
fpc_target_os=win64
fpc_flags=
optimize=3
cython_target=--cplus

[file-run]
command="$(VIM_FILEPATH)"
command:c,cpp,pascal,haskell,rust="$(VIM_PATHNOEXT)"
command:go="$(VIM_PATHNOEXT)"
command:python=$(+pyenv:python) "$(VIM_FILEPATH)"
command:zig=zig run "$(VIM_FILEPATH)"
command:fsharp=dotnet fsi "$(VIM_FILEPATH)"
command:cs=dotnet script "$(VIM_FILEPATH)"
command:javascript=node "$(VIM_FILEPATH)"
command:lua=nvim -l "$(VIM_FILEPATH)"
cwd=<root>

[file-build:debug]
command:c=zig cc -Wall "$(VIM_FILEPATH)" -o "$(VIM_PATHNOEXT)$(+exe_suffix)" -I%INCLUDE% -L%LIB% $(+cx_flags) $(+c_flags) -m$(+os_bits) --target=$(+target_triple)
command:cpp=zig c++ -Wall "$(VIM_FILEPATH)" -o "$(VIM_PATHNOEXT)$(+exe_suffix)" -I%INCLUDE% -L%LIB% $(+cx_flags) $(+cxx_flags) -m$(+os_bits) --target=$(+target_triple)
command:cython=cython -3 $(+cython_target) -a $(VIM_FILEPATH) && explorer $(VIM_PATHNOEXT).html
command:zig=zig build-exe "$(VIM_FILEPATH)" -target $(+target_triple)
command:haskell=ghc "$(VIM_FILEPATH)"
command:pascal=fpc -P$(+fpc_target_cpu) -T$(+fpc_target_os) $(+fpc_flags) "$(VIM_FILEPATH)"
command:rust=rustc -o "$(VIM_PATHNOEXT)"$(+exe_suffix) "$(VIM_FILEPATH)"
command:make=make -f "$(VIM_FILEPATH)"
cwd=<root>

[file-build:release]
command:c=zig cc -fno-lto -O$(+optimize) -Wall "$(VIM_FILEPATH)" -o "$(VIM_PATHNOEXT)$(+exe_suffix)" -I%INCLUDE% -L%LIB% $(+c_flags) -m$(+os_bits) --target=$(+target_triple)
command:cpp=zig c++ -fno-lto -O$(+optimize) -Wall "$(VIM_FILEPATH)" -o "$(VIM_PATHNOEXT)$(+exe_suffix)" -I%INCLUDE% -L%LIB% $(+cxx_flags) -m$(+os_bits) --target=$(+target_triple)
command:zig=zig build-exe -O ReleaseSafe "$(VIM_FILEPATH)" -target $(+target_triple)
command:pascal=fpc -O$(+optimize) -P$(+fpc_target_cpu) -T$(+fpc_target_os) $(+fpc_flags) "$(VIM_FILEPATH)"
command:rust=rustc -o "$(VIM_PATHNOEXT)"$(+exe_suffix) -C opt-level=$(+optimize) "$(VIM_FILEPATH)"
cwd=<root>

[project-run]
# command:c,cpp=xmake run
command:c,cpp,zig=zig build run
command:cs,fsharp=dotnet run
command:rust=cargo run
cwd=<root>

[project-build]
# command:c,cpp=xmake
command:c,cpp,zig=zig build $(-step:install)
command:cs,fsharp=dotnet build
command:rust=cargo build
cwd=<root>

[project-publish]
command:cs,fsharp=dotnet publish -c Release --$(-sc?:self-contained,no-self-contained)
cwd=<root>

[generate-project-file]
command=xmake project -k compile_commands --lsp=clangd
cwd=<root>

[run-test]
command:python=$(+pyenv:python) -m pytest <root>/tests
command:zig=zig build test
cwd=<root>

[terminal]
command=cmd
cwd=<root>

[py-shell]
command=$(+pyenv:python)
cwd=<root>

[git-commit]
command=git commit -m "$(-message:update)"
cwd=<root>

[git-push]
command=git push $(-remote:origin) $(-local:master)
cwd=<root>

[git-checkout]
command=git checkout -- $(-file:.)
cwd=<root>

[git-reset]
command=git reset --$(-mode:&mixed,&soft,&hard) $(-commit-hash:HEAD)
cwd=<root>

[git-log]
command=git $(-type:&reflog,&log)
cwd=<root>
